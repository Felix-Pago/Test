steps:
# Build the container image
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest', '.', '--platform', 'linux/amd64' ]
# Push the container image to Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest']
# Deploy container image to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - '${_SERVICE_NAME}'
    - '--image'
    - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'
    - '--region'
    - '${_REGION}'
    - '--port'
    - '${_PORT}'
    - '--memory'
    - '${_MEMORY}'
    - '--service-account'
    - '${_SERVICE_ACCOUNT}'
    - '--cpu'
    - '${_CPU}'
    - '--allow-unauthenticated'
    # Set environment variables
    - '--set-env-vars=PYTHONUNBUFFERED=${_ENV_PYTHONUNBUFFERED}'
    - '--set-env-vars=ENV=${_ENV_ENV}'
    - '--set-env-vars=CONFIG_PATH=${_ENV_CONFIG_PATH}'
# Assign 100% of traffic to the current LATEST
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'services'
    - 'update-traffic'
    - '${_SERVICE_NAME}'
    - '--to-latest'
    - '--region'
    - '${_REGION}'
images: ['gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest']
